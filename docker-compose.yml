version: '3.8'

volumes:
  spark-data:
  postgres-db-volume:


networks:
  data_network:
    driver: bridge

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow
  image: apache/airflow:2.9.1-python3.12
  env_file:
    - airflow.env
  volumes:
    - ./dags:/opt/airflow/dags
    - ./spark_jars:/opt/bitnami/spark/jars
    - ./logs:/opt/airflow/logs
    - ./pipelines:/opt/airflow/pipelines
    - ./config:/opt/airflow/config
    - ./etls:/opt/airflow/etls
    - ./data:/opt/airflow/data
    - ./database:/opt/airflow/database
    - ./requirements.txt:/opt/airflow/requirements.txt
    - ./utils:/opt/airflow/utils
  networks:
    - data_network
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - data_network

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - data_network
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    networks:
      - data_network
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    command: >
      bash -c "airflow db init && airflow db upgrade && airflow users create --username admin --firstname admin --lastname admin --role Admin --email airflow@airflow.com --password admin"
    networks:
      - data_network
    depends_on:
      postgres:
        condition: service_healthy

  spark-master:
    image: docker.io/bitnami/spark:3.5.4
    container_name: "spark-master"
    ports:
      - "7077:7077" # Spark master port
      - "8081:8080" # Spark master web UI port
    expose:
      - "7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    networks:
      - data_network

  spark-worker-1:
    image: docker.io/bitnami/spark:3.5.4
    container_name: "spark-worker-1"
    env_file:
      - ./spark.env
    depends_on:
      - spark-master
    networks:
      - data_network
